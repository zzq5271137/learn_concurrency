package _07_Lock._04_TypesOfLock;

/*
 * 锁的分类:
 * 这些锁的分类, 是从各种不同角度出发的; 这些分类并不是互斥的, 也就是多个类型可以并存, 有可能一个锁同时属于多种类型;
 * 比如ReentrantLock既是互斥锁, 又是可重入锁;
 * 锁的分类如下:
 * 1. 线程要不要锁住同步资源:
 *    a). 锁住: 悲观锁(互斥同步锁)
 *    b). 不锁住: 乐观锁(非互斥同步锁)
 * 2. 线程能否共享一把锁:
 *    a). 可以: 共享锁
 *    b). 不可以: 独占锁/排他锁
 * 3. 多线程竞争时, 是否排队
 *    a). 排队: 公平锁
 *    b). 先尝试插队, 插队失败再排队: 非公平锁
 * 4. 同一个线程是否可以重复获得同一把锁:
 *    a). 可以: 可重入锁
 *    b). 不可以: 不可重入锁
 * 5. 等待锁期间是否可以响应中断:
 *    a). 可以: 可中断锁
 *    b). 不可以: 不可中断锁
 * 6. 等待锁的过程中, 锁在干什么:
 *    a). 自旋(即不停的尝试去获得锁): 自旋锁
 *    b). 阻塞(即第一次尝试获得锁失败了, 就不再尝试, 而是进入阻塞): 非自旋锁
 */

public class TypesOfLock {
    public static void main(String[] args) {
    }
}
