package _02_JavaMemoryModel._05_SingletonPattern;

/*
 * 单例模式(Singleton Pattern)的作用:
 * 1. 节省内存和计算
 *    在初始化某个类的实例对象时, 可能会有不小的花费, 比如初始化它的属性需要发送多次请求、消耗CPU资源等等;
 * 2. 保证结果正确
 *    因为如果对某一个类使用单例模式, 会保证整个程序运行时该类只有一个实例对象, 它可以保证结果的正确,
 *    比如需要做一些统计计算的类(可能是用多线程去统计的, 所以我们需要一个全局的单例计数器);
 * 3. 方便管理
 *    比如对于工具类而言, 我们只需要一个实例, 而单例模式可以帮助我们管理工具类的实例;
 *
 * 单例模式的适用场景:
 * 1. 无状态的工具类
 *    比如日志工具类, 不管是在哪里使用, 我们需要的只是它帮助我们记录日志信息, 除此之外, 并不需要在它的实例对象上存储任何状态,
 *    这时候我们就只需要一个实例对象即可;
 * 2. 全局信息类
 *    比如我们在一个类上记录网站的访问次数, 我们不希望有的访问被记录在对象A上, 有的却记录在对象B上,
 *    这时候, 我们就让这个类成为单例;
 */

public class SingletonPatternIntro {
    public static void main(String[] args) {
    }
}
