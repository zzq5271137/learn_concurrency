package _11_ConcurrentCollections._05_ConcurrentQueue._02_BlockingQueue;

/*
 * 什么是阻塞队列:
 * 阻塞队列是具有阻塞功能的队列, 所以首先它是一个队列, 其次具有阻塞功能;
 * 所谓阻塞功能是指:
 * 1. 当队列满时, 试图往队列中插入数据的线程会阻塞;
 * 2. 当队列空时, 试图从队列中拿出数据的线程会阻塞;
 * 通常, 阻塞队列的一段是给生产者放数据用, 另一端给消费者拿数据用; 阻塞队列是线程安全的;
 *
 * 阻塞队列带有阻塞功能的方法通常是:
 * 1. take()方法:
 *    获取并移除队列的头结点; 如果执行take()时, 队里中无数据, 则线程阻塞, 直到队列里有数据;
 * 2. put()方法:
 *    插入元素; 如果执行put()时, 队列已满, 则线程阻塞, 直到队列里有了空闲空间;
 *
 * 是否有界(容量有多大):
 * 这是一个非常重要的属性, 无界队列意味着里面可以容纳的数据非常多(Integer.MAX_VALUE, 约为2的31次, 是非常大的一个数,
 * 可以近似认为是无限容量);
 *
 * 阻塞队列与线程池:
 * 阻塞队列是线程池的重要组成部分, 详见线程池相关内容;
 *
 * BlockingQueue的主要方法(3组方法):
 * 1. put()和take()
 *    插入与取出元素的方法, 会阻塞, 详见上方;
 * 2. add()、remove()、element()
 *    1). add()方法也是往队列中插入元素, 与put()方法的区别在于, 如果队列满了, 会抛出异常;
 *    2). remove()方法也是取出队列的头元素(同时删除), 与take()方法的区别在于, 如果队列为空, 会抛出异常;
 *    3). element()方法会返回队列的头元素(不会删除), 如果队列为空, 也会抛出异常;
 * 3. offer()、poll()、peek()
 *    1). offer()方法也是往队列中插入元素, 与add()的区别在于, 如果队列满了, offer()不会抛出异常,
 *        而是会返回一个false(插入成功返回true);
 *    2). poll()方法也是从队列中取出元素(同时删除), 与remove()的区别在于, 如果队列为空, poll()不会抛异常,
 *        而是返回null(队列不为空则返回取到的元素);
 *    3). peek()方法会返回队列的头元素(不会删除), 如果队列为空, 返回null;
 */

public class BlockingQueueIntro {
    public static void main(String[] args) {
    }
}
