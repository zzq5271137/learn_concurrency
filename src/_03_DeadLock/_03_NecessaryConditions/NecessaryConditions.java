package _03_DeadLock._03_NecessaryConditions;

/*
 * 死锁发生的4个必要条件:
 * 1. 互斥条件
 *    指线程对所分配到的资源进行排它性使用, 即在一段时间内某资源只由一个线程占用;
 *    如果此时还有其它线程请求资源, 则请求者只能等待, 直至占有资源的线程用毕释放;
 * 2. 请求和保持条件
 *    指线程已经保持至少一个资源, 但又提出了新的资源请求, 而该资源已被其它线程占有, 此时请求线程阻塞,
 *    但又对自己已获得的其它资源保持不放;
 * 3. 不剥夺条件
 *    指线程已获得的资源, 在未使用完之前, 不能被剥夺, 只能在使用完时由自己释放;
 * 4. 环路等待条件
 *    指在发生死锁时, 必然存在一个线程等待资源的环形链, 即线程集合{T0, T1, T2, ···, Tn}中的T0正在等待一个T1占用的资源,
 *    T1正在等待T2占用的资源, ..., Tn正在等待已被T0占用的资源;
 */

public class NecessaryConditions {
    public static void main(String[] args) {
    }
}
