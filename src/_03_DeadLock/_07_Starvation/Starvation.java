package _03_DeadLock._07_Starvation;

/*
 * 饥饿(Starvation)也是活跃性问题的一种;
 *
 * 什么是饥饿:
 * 如果一个线程因为CPU时间全部被其他线程抢走而得不到CPU运行时间(得不到运行), 这种状态被称之为饥饿,
 * 一般是由高优先级线程吞噬所有的低优先级线程的CPU时间引起的;
 * 即当线程需要某些资源(例如CPU资源), 但却始终得不到, 这就叫饥饿; 例如当线程的优先级设置得过低,
 * 或者其它某线程持有锁但同时又无限循环从而不释放锁, 或者某程序始终占有某文件的写锁, 等等;
 *
 * 饥饿的影响:
 * 饥饿可能会导致响应性变差; 比如, 我们的浏览器有一个线程负责处理前台响应(打开收藏夹等动作),
 * 另外的后台线程负责下载图片和文件、计算、渲染等工作; 在这种情况下, 如果后台线程把CPU资源占用了(前台线程陷入饥饿),
 * 那么前台线程将无法得到很好的执行, 这会导致用户体验很差;
 */

public class Starvation {
    public static void main(String[] args) {
    }
}
