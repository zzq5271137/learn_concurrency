package _01_EightCores._08_Core8_Problems._01_ThreadSecurity;

/*
 * 多线程带来的问题主要有两大部分, 第一部分是线程安全问题, 第二部分是性能问题, 这里介绍线程安全问题;
 *
 * 关于什么是线程安全, Brian Goetz在"Java并发编程实战"一书中指出:
 * 当多个线程访问一个对象时, 如果不用考虑这些线程在运行时环境下的调度和交替执行, 也不需要进行额外的同步,
 * 或者也不需要在调用方进行任何其他的协调操作, 调用这个对象的行为都可以获得正确的结果, 那么这个对象是线程安全的;
 *
 * 通俗的说, 线程安全就是, 不管在业务中遇到怎样的多个线程访问某对象或某方法的情况, 而在编写这个业务逻辑的时候,
 * 都不需要做任何额外的处理(也就是可以像单线程编程一样), 程序也可以正常运行(不会因为多线程而出错),
 * 就可以称为线程安全;
 *
 * 相反, 如果在编程的时候, 需要考虑这些线程在运行时的调度和交替(例如在get()调用期间不能调用set()),
 * 或者需要进行额外的同步(比如使用synchronized关键字等), 那么线程就是不安全的;
 *
 * 线程安全问题主要有两个:
 * 1. 数据争用: 由于多个线程对同一数据同时进行写操作, 会造成数据错误(会造成某一方写入的数据丢了);
 * 2. 竞争条件: 即使不是同时写造成的数据错误, 由于顺序原因依然会造成错误, 例如在写入前就读取了;
 *
 * 什么情况下会出现线程安全问题:
 * 1. 运行结果错误, 例如a++在多线程下出现消失的请求现象, 属于read-modify-write;
 * 2. 活跃性问题, 例如死锁、活锁、饥饿等;
 * 3. 对象发布和初始化时的安全问题;
 */

public class ThreadSecurityIntro {
    public static void main(String[] args) {
    }
}
